// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

const attrs = require("./attributes");
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "expression", "symbols": ["boolean"]},
    {"name": "boolean$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean", "_", "boolean$string$1", "_", "comparison"], "postprocess": attrs.and},
    {"name": "boolean$string$2", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean", "_", "boolean$string$2", "_", "comparison"], "postprocess": attrs.or},
    {"name": "boolean", "symbols": ["comparison"]},
    {"name": "comparison$string$1", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison", "symbols": ["arith", "_", "comparison$string$1", "_", "arith"], "postprocess": attrs.lte},
    {"name": "comparison$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison", "symbols": ["arith", "_", "comparison$string$2", "_", "arith"], "postprocess": attrs.gte},
    {"name": "comparison$string$3", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison", "symbols": ["arith", "_", "comparison$string$3", "_", "arith"], "postprocess": attrs.eq},
    {"name": "comparison$string$4", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comparison", "symbols": ["arith", "_", "comparison$string$4", "_", "arith"], "postprocess": attrs.neq},
    {"name": "comparison", "symbols": ["arith", "_", {"literal":"<"}, "_", "arith"], "postprocess": attrs.lt},
    {"name": "comparison", "symbols": ["arith", "_", {"literal":">"}, "_", "arith"], "postprocess": attrs.gt},
    {"name": "comparison", "symbols": ["arith"]},
    {"name": "arith", "symbols": ["arith", "_", {"literal":"+"}, "_", "term"], "postprocess": attrs.add},
    {"name": "arith", "symbols": ["arith", "_", {"literal":"-"}, "_", "term"], "postprocess": attrs.sub},
    {"name": "arith", "symbols": ["term"]},
    {"name": "term", "symbols": ["term", "_", {"literal":"*"}, "_", "unary"], "postprocess": attrs.mul},
    {"name": "term", "symbols": ["term", "_", {"literal":"/"}, "_", "unary"], "postprocess": attrs.div},
    {"name": "term", "symbols": ["unary"]},
    {"name": "unary", "symbols": [{"literal":"!"}, "_", "unary"], "postprocess": attrs.neg},
    {"name": "unary", "symbols": ["atom"]},
    {"name": "atom", "symbols": ["unit"]},
    {"name": "atom", "symbols": ["string"]},
    {"name": "atom", "symbols": ["variable"]},
    {"name": "atom", "symbols": ["number"]},
    {"name": "atom$subexpression$1", "symbols": [/[tT]/, /[rR]/, /[uU]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "atom", "symbols": ["atom$subexpression$1"], "postprocess": attrs._true},
    {"name": "atom$subexpression$2", "symbols": [/[fF]/, /[aA]/, /[lL]/, /[sS]/, /[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "atom", "symbols": ["atom$subexpression$2"], "postprocess": attrs._false},
    {"name": "atom", "symbols": [{"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": ([,,expr,,]) => expr},
    {"name": "atom", "symbols": ["atom", "_", "index"], "postprocess": attrs.indexer},
    {"name": "atom", "symbols": ["atom", "_", {"literal":"."}, "_", "name"], "postprocess": attrs.get},
    {"name": "atom", "symbols": ["atom", "_", {"literal":"("}, "_", {"literal":")"}], "postprocess": attrs.callable},
    {"name": "atom", "symbols": ["atom", "_", {"literal":"("}, "_", "params", "_", {"literal":")"}], "postprocess": attrs.callableWithParams},
    {"name": "unit$subexpression$1", "symbols": ["number"]},
    {"name": "unit$subexpression$1", "symbols": ["variable"]},
    {"name": "unit$subexpression$2", "symbols": [/[wW]/, /[eE]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "unit", "symbols": ["unit$subexpression$1", "_", "unit$subexpression$2"], "postprocess": attrs.wei},
    {"name": "unit$subexpression$3", "symbols": ["number"]},
    {"name": "unit$subexpression$3", "symbols": ["variable"]},
    {"name": "unit$subexpression$4", "symbols": [/[gG]/, /[wW]/, /[eE]/, /[iI]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "unit", "symbols": ["unit$subexpression$3", "_", "unit$subexpression$4"], "postprocess": attrs.gwei},
    {"name": "unit$subexpression$5", "symbols": ["number"]},
    {"name": "unit$subexpression$5", "symbols": ["variable"]},
    {"name": "unit$subexpression$6", "symbols": [/[eE]/, /[tT]/, /[hH]/, /[eE]/, /[rR]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "unit", "symbols": ["unit$subexpression$5", "_", "unit$subexpression$6"], "postprocess": attrs.ether},
    {"name": "index", "symbols": [{"literal":"["}, "_", "expression", "_", {"literal":"]"}], "postprocess": ([,,index,,]) => [index]},
    {"name": "params", "symbols": ["expression"]},
    {"name": "params", "symbols": ["params", "_", {"literal":","}, "_", "expression"], "postprocess": ([otherParams,,,,lastParam]) => [...otherParams, lastParam]},
    {"name": "string$ebnf$1", "symbols": []},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", /[^']/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": [{"literal":"'"}, "string$ebnf$1", {"literal":"'"}], "postprocess": attrs.str},
    {"name": "variable$ebnf$1", "symbols": []},
    {"name": "variable$ebnf$1", "symbols": ["variable$ebnf$1", /[_a-zA-Z0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "variable", "symbols": [/[_a-zA-Z]/, "variable$ebnf$1"], "postprocess": attrs.variable},
    {"name": "name$ebnf$1", "symbols": []},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", /[_a-zA-Z0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": [/[_a-zA-Z]/, "name$ebnf$1"], "postprocess": attrs.name},
    {"name": "number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": attrs.num},
    {"name": "number$string$1", "symbols": [{"literal":"0"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "number$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$string$1", "number$ebnf$2"], "postprocess": attrs.num},
    {"name": "number$ebnf$3", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$3", "symbols": ["number$ebnf$3", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$4", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$4", "symbols": ["number$ebnf$4", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$3", {"literal":"e"}, "number$ebnf$4"], "postprocess": attrs.scientific},
    {"name": "number", "symbols": [{"literal":"-"}, "number"], "postprocess": attrs.negnum}
]
  , ParserStart: "expression"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
